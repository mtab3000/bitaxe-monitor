name: Enhanced Code Quality & Testing

on:
  push:
    branches: [ main, develop, test-pylint-enhancements ]
    paths:
      - '**.py'
      - 'requirements*.txt'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - 'requirements*.txt'

env:
  PYTHON_DEFAULT_VERSION: '3.11'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint flake8 black isort mypy bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Run Black code formatter check
      run: |
        black --check --diff enhanced_bitaxe_monitor.py src/ examples/ scripts/ tests/

    - name: Run isort import sorter check  
      run: |
        isort --check-only --diff enhanced_bitaxe_monitor.py src/ examples/ scripts/ tests/

    - name: Run Flake8 linter
      run: |
        flake8 enhanced_bitaxe_monitor.py src/ examples/ scripts/ tests/ --max-line-length=120 --extend-ignore=E203,W503

    - name: Run Pylint on enhanced monitor
      run: |
        pylint enhanced_bitaxe_monitor.py --disable=C0114,C0115,C0116,R0903,R0913,W0613,R0912,R0915 --max-line-length=120

    - name: Run Pylint on source code
      run: |
        if [ -d "src" ]; then
          pylint src/ --disable=C0114,C0115,C0116,R0903,R0913,W0613,R0912,R0915 --max-line-length=120
        fi

    - name: Run Pylint on scripts
      run: |
        if [ -d "scripts" ]; then
          pylint scripts/ --disable=C0114,C0115,C0116,R0903,R0913,W0613,R0912,R0915 --max-line-length=120
        fi

    - name: Run MyPy type checking
      run: |
        mypy enhanced_bitaxe_monitor.py --ignore-missing-imports
      continue-on-error: true

    - name: Run Bandit security linting
      run: |
        bandit -r enhanced_bitaxe_monitor.py src/ examples/ scripts/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  test-enhanced-monitor:
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov requests flask
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Test enhanced monitor configuration
      run: |
        python test_config.py

    - name: Test enhanced monitor import
      run: |
        python -c "from enhanced_bitaxe_monitor import EnhancedBitAxeMonitor; print('Enhanced monitor import successful')"

    - name: Run pytest tests
      run: |
        if [ -d "tests" ]; then
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        fi
      continue-on-error: true

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
      if: always()

  docker-build-test:
    runs-on: ubuntu-latest
    needs: test-enhanced-monitor
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        cd docker
        docker build -t bitaxe-enhanced-monitor:test .
    
    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name test-container -p 8081:8080 \
          -e MINER_1_IP=127.0.0.1 \
          -e MINER_2_IP=127.0.0.2 \
          -e MINER_3_IP=127.0.0.3 \
          bitaxe-enhanced-monitor:test
        
        # Wait for container to start
        sleep 10
        
        # Test if container is running
        if docker ps | grep test-container; then
          echo "✅ Docker container started successfully"
        else
          echo "❌ Docker container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  generate-badges:
    runs-on: ubuntu-latest
    needs: [code-quality, test-enhanced-monitor, docker-build-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint anybadge requests flask
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Generate pylint score
      run: |
        PYLINT_SCORE=$(pylint enhanced_bitaxe_monitor.py --disable=C0114,C0115,C0116,R0903,R0913,W0613 --output-format=text --reports=yes --score=yes | grep "Your code has been rated" | grep -oE '[0-9]+\.[0-9]+' | head -1)
        echo "PYLINT_SCORE=$PYLINT_SCORE" >> $GITHUB_ENV
        echo "Pylint score: $PYLINT_SCORE"
    
    - name: Generate quality badges
      run: |
        # Pylint badge
        if (( $(echo "$PYLINT_SCORE >= 9.0" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$PYLINT_SCORE >= 8.0" | bc -l) )); then
          COLOR="green"  
        elif (( $(echo "$PYLINT_SCORE >= 7.0" | bc -l) )); then
          COLOR="yellowgreen"
        elif (( $(echo "$PYLINT_SCORE >= 6.0" | bc -l) )); then
          COLOR="yellow"
        else
          COLOR="orange"
        fi
        
        anybadge --label="code quality" --value="$PYLINT_SCORE/10" --color="$COLOR" --file=quality-badge.svg
        
        # Status badges
        anybadge --label="enhanced monitor" --value="working" --color="brightgreen" --file=monitor-badge.svg
        anybadge --label="charts" --value="functional" --color="brightgreen" --file=charts-badge.svg
        anybadge --label="docker" --value="ready" --color="blue" --file=docker-badge.svg
    
    - name: Upload badges
      uses: actions/upload-artifact@v3
      with:
        name: quality-badges
        path: |
          quality-badge.svg
          monitor-badge.svg
          charts-badge.svg
          docker-badge.svg
