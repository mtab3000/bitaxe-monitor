name: Code Quality & Testing

on:
  push:
    branches: [ main, develop, test-analysis-improvements ]
  pull_request:
    branches: [ main, develop ]

jobs:
  pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Analysing the code with pylint - Source Code
      run: |
        pylint src/ --disable=C0114,C0115,C0116,R0903,R0913,W0613 --max-line-length=120 --output-format=text
      continue-on-error: true
    
    - name: Analysing the code with pylint - Scripts
      run: |
        pylint scripts/ --disable=C0114,C0115,C0116,R0903,R0913,W0613,R0912,R0915 --max-line-length=120 --output-format=text
      continue-on-error: true
    
    - name: Analysing the code with pylint - Tests  
      run: |
        pylint tests/ --disable=C0114,C0115,C0116,R0903,R0913,W0613,R0201,W0212 --max-line-length=120 --output-format=text
      continue-on-error: true
    
    - name: Check code formatting with black
      run: |
        pip install black
        black --check --line-length=120 src/ scripts/ tests/ || true
    
    - name: Security check with bandit
      run: |
        pip install bandit
        bandit -r src/ scripts/ -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then cat bandit-report.json; fi
    
    - name: Code complexity check with radon
      run: |
        pip install radon
        radon cc src/ scripts/ --min=B --show-complexity --total-average
      continue-on-error: true
    
    - name: Import sorting check with isort
      run: |
        pip install isort
        isort --check-only --profile black src/ scripts/ tests/ || true

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Run core tests
      run: |
        if [ -f tests/run_tests.py ]; then 
          python tests/run_tests.py
        else
          pytest tests/ --verbose
        fi
    
    - name: Run analysis generator tests
      run: |
        if [ -f tests/test_analysis_generator.py ]; then
          python tests/test_analysis_generator.py
        fi
      continue-on-error: true
    
    - name: Test analysis generator CLI
      run: |
        if [ -f scripts/bitaxe_analysis_generator.py ]; then
          python scripts/bitaxe_analysis_generator.py --help
        fi
      continue-on-error: true
    
    - name: Run coverage analysis
      run: |
        pytest tests/ --cov=src/ --cov=scripts/ --cov-report=xml --cov-report=term-missing
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        cd docker
        docker build -t bitaxe-monitor:test .
    
    - name: Test Docker image - Core functionality
      run: |
        docker run --rm bitaxe-monitor:test python -c "import src.bitaxe_monitor; print('Docker build successful')"
    
    - name: Test Docker image - Analysis generator
      run: |
        docker run --rm bitaxe-monitor:test python -c "
        try:
            import sys
            sys.path.append('/app/scripts')
            from bitaxe_analysis_generator import BitaxeAnalyzer
            print('Analysis generator import successful')
        except ImportError as e:
            print(f'Analysis generator import failed: {e}')
        "
      continue-on-error: true
    
    - name: Test Docker image - Dependencies
      run: |
        docker run --rm bitaxe-monitor:test python -c "
        import pandas as pd
        import numpy as np
        import requests
        import flask
        print('All dependencies available')
        "

  analysis-generator-validation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Validate analysis generator CLI
      run: |
        python scripts/bitaxe_analysis_generator.py --help
    
    - name: Test analysis generator with mock data
      run: |
        python tests/test_analysis_generator.py
    
    - name: Run verification script
      run: |
        python scripts/verify_test_branch.py
      continue-on-error: true
    
    - name: Test enhanced demo
      run: |
        python examples/enhanced_analysis_demo.py --help || echo "Demo script available"
      continue-on-error: true
