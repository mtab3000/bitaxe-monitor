name: Pylint Code Quality

on:
  push:
    branches: [ main, develop, test-analysis-improvements, test-pylint-enhancements ]
    paths:
      - '**.py'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.py'

permissions:
  contents: read
  issues: write
  actions: write

jobs:
  pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint pylint-json2html
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Create pylint config
      run: |
        cat > .pylintrc << 'EOF'
        [MASTER]
        jobs=4
        persistent=yes
        suggestion-mode=yes
        unsafe-load-any-extension=no
        
        [MESSAGES CONTROL]
        disable=
            C0114,  # missing-module-docstring
            C0115,  # missing-class-docstring
            C0116,  # missing-function-docstring
            R0903,  # too-few-public-methods
            R0913,  # too-many-arguments
            W0613,  # unused-argument
            R0912,  # too-many-branches
            R0915,  # too-many-statements
            R0201,  # no-self-use
            W0212,  # protected-access
            C0103,  # invalid-name
            W0511,  # fixme
            R0902,  # too-many-instance-attributes
            R0914,  # too-many-locals
            C0301   # line-too-long (handled by black)
        
        [FORMAT]
        max-line-length=120
        max-module-lines=1000
        
        [DESIGN]
        max-args=10
        max-attributes=15
        max-bool-expr=5
        max-branches=15
        max-locals=20
        max-parents=7
        max-public-methods=25
        max-returns=6
        max-statements=50
        
        [SIMILARITIES]
        min-similarity-lines=4
        ignore-comments=yes
        ignore-docstrings=yes
        ignore-imports=no
        
        [VARIABLES]
        additional-builtins=
        allow-global-unused-variables=yes
        
        [CLASSES]
        defining-attr-methods=__init__,__new__,setUp,__post_init__
        exclude-protected=_asdict,_fields,_replace,_source,_make
        valid-classmethod-first-arg=cls
        valid-metaclass-classmethod-first-arg=cls
        EOF
    
    - name: Run pylint on source code
      run: |
        pylint src/ --rcfile=.pylintrc --output-format=text --reports=yes --score=yes
      continue-on-error: false
    
    - name: Run pylint on scripts
      run: |
        pylint scripts/ --rcfile=.pylintrc --output-format=text --reports=yes --score=yes
      continue-on-error: false
    
    - name: Run pylint on tests
      run: |
        pylint tests/ --rcfile=.pylintrc --output-format=text --reports=yes --score=yes --disable=W0212,R0201
      continue-on-error: true
    
    - name: Run pylint on examples  
      run: |
        pylint examples/ --rcfile=.pylintrc --output-format=text --reports=yes --score=yes
      continue-on-error: true
    
    - name: Generate pylint report
      run: |
        echo "## Pylint Quality Report" > pylint-report.md
        echo "### Python ${{ matrix.python-version }}" >> pylint-report.md
        echo "" >> pylint-report.md
        echo "\`\`\`" >> pylint-report.md
        pylint src/ scripts/ --rcfile=.pylintrc --output-format=text --reports=yes --score=yes >> pylint-report.md || true
        echo "\`\`\`" >> pylint-report.md
        
        # Generate JSON output for detailed analysis
        pylint src/ scripts/ --rcfile=.pylintrc --output-format=json --reports=no > pylint-results.json || true
        
        # Generate HTML report if pylint-json2html is available
        if command -v pylint-json2html &> /dev/null; then
          pylint-json2html -f jsonextended -o pylint-report.html pylint-results.json || true
        fi
    
    - name: Upload pylint report
      uses: actions/upload-artifact@v3
      with:
        name: pylint-report-${{ matrix.python-version }}
        path: |
          pylint-report.md
          pylint-results.json
          pylint-report.html
      if: always()
    
    - name: Comment PR with pylint results
      if: github.event_name == 'pull_request' && matrix.python-version == '3.12'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('pylint-report.md')) {
            const report = fs.readFileSync('pylint-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          }
      continue-on-error: true

  pylint-badge:
    runs-on: ubuntu-latest
    needs: pylint
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-3.12-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-3.12-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint anybadge
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Generate pylint score
      run: |
        PYLINT_SCORE=$(pylint src/ scripts/ --disable=C0114,C0115,C0116,R0903,R0913,W0613 --output-format=text --reports=yes --score=yes | grep "Your code has been rated" | grep -oE '[0-9]+\.[0-9]+' | head -1)
        echo "PYLINT_SCORE=$PYLINT_SCORE" >> $GITHUB_ENV
        echo "Pylint score: $PYLINT_SCORE"
    
    - name: Generate pylint badge
      run: |
        if (( $(echo "$PYLINT_SCORE >= 9.0" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$PYLINT_SCORE >= 8.0" | bc -l) )); then
          COLOR="green"  
        elif (( $(echo "$PYLINT_SCORE >= 7.0" | bc -l) )); then
          COLOR="yellowgreen"
        elif (( $(echo "$PYLINT_SCORE >= 6.0" | bc -l) )); then
          COLOR="yellow"
        elif (( $(echo "$PYLINT_SCORE >= 5.0" | bc -l) )); then
          COLOR="orange"
        else
          COLOR="red"
        fi
        
        anybadge --label="pylint" --value="$PYLINT_SCORE/10" --color="$COLOR" --file=pylint-badge.svg
    
    - name: Upload badge artifact
      uses: actions/upload-artifact@v3
      with:
        name: pylint-badge
        path: pylint-badge.svg
